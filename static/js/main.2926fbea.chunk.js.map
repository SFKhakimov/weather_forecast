{"version":3,"sources":["api/api.js","components/WeatherCard.jsx","components/Overlay.jsx","App.jsx","serviceWorker.js","index.js"],"names":["api","baseUrl","metric","lang","id","forecast","current","useStyles","makeStyles","theme","card","zIndex","position","boxShadow","container","display","forecastContainer","flexDirection","image","width","expand","transform","margin","transition","transitions","create","duration","shortest","expandOpen","close","top","right","WeatherCard","city","useState","currentWeather","setCurrentWeather","forecastWeather","setForecastWeather","loading","setLoadig","expanded","setExpanded","classes","useEffect","a","axios","get","data","console","log","fetchWeather","temp","c","t","Math","round","icon","img","weather","Card","className","CardMedia","component","alt","height","title","CardContent","Typography","gutterBottom","variant","color","main","description","humidity","pressure","CardActions","IconButton","clsx","onClick","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","list","map","key","dt","dt_txt","overlay","left","bottom","backgroundColor","Overlay","marginTop","App","visible","setVisible","cityWeather","setCityWeather","Container","maxWidth","List","ListItem","Button","openCard","app","StrictMode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2926fbea.chunk.js","sourcesContent":["const api = {\r\n  baseUrl: 'https://api.openweathermap.org/data/2.5/',\r\n  metric: 'units=metric',\r\n  lang: 'lang=RU',\r\n  id: 'appid=a4cf2fd3d5b88c7f4c38a93ee8e2ecbf',\r\n  forecast: 'forecast',\r\n  current: 'weather',\r\n};\r\n\r\nexport default api;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  CardActions,\r\n  IconButton,\r\n  Collapse,\r\n} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport api from '../api/api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    zIndex: '50',\r\n    position: 'relative',\r\n    boxShadow: '0 0 8px rgba(255, 255, 255, .7)',\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n  },\r\n  forecastContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  image: {\r\n    width: '40%',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    margin: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  close: {\r\n    position: 'absolute',\r\n    top: '-50px',\r\n    right: '-50px',\r\n  },\r\n}));\r\n\r\nconst WeatherCard = ({ city }) => {\r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [forecastWeather, setForecastWeather] = useState(null);\r\n  const [loading, setLoadig] = useState(false);\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    async function fetchWeather() {\r\n      try {\r\n        const current = await axios.get(\r\n          `${api.baseUrl}/${api.current}?q=${city}&${api.metric}&${api.id}&${api.lang}`\r\n        );\r\n        const forecast = await axios.get(\r\n          `${api.baseUrl}/${api.forecast}?q=${city}&${api.metric}&${api.id}&${api.lang}`\r\n        );\r\n        setCurrentWeather(current.data);\r\n        setForecastWeather(forecast.data);\r\n        setLoadig(true);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    fetchWeather();\r\n  }, [city]);\r\n\r\n  console.log(currentWeather, forecastWeather);\r\n\r\n  const temp = (c) => {\r\n    const t = Math.round(c);\r\n\r\n    if (t > 0) {\r\n      return ` +${t}`;\r\n    }\r\n    if (t < 0) {\r\n      return ` -${t}`;\r\n    }\r\n    if (t === 0) {\r\n      return ` ${t}`;\r\n    }\r\n  };\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  const icon = (img) => img.weather[0].icon;\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      {loading ? (\r\n        <>\r\n          <div className={classes.container}>\r\n            <CardMedia\r\n              component=\"img\"\r\n              alt=\"Contemplative Reptile\"\r\n              height=\"140\"\r\n              title=\"Contemplative Reptile\"\r\n              image={`http://openweathermap.org/img/wn/${`${icon(currentWeather)}`}@2x.png`}\r\n              className={classes.image}\r\n            />\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {city}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {`На улице ${temp(currentWeather.main.temp)}, ${\r\n                  currentWeather.weather[0].description\r\n                }`}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {`Влажность: ${currentWeather.main.humidity}`}\r\n              </Typography>\r\n\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {`Атмосферное давление: ${currentWeather.main.pressure}`}\r\n              </Typography>\r\n            </CardContent>\r\n          </div>\r\n          <CardActions>\r\n            <IconButton\r\n              className={clsx(classes.expand, {\r\n                [classes.expandOpen]: expanded,\r\n              })}\r\n              onClick={handleExpandClick}\r\n              aria-expanded={expanded}\r\n              aria-label=\"show more\"\r\n            >\r\n              <ExpandMoreIcon />\r\n            </IconButton>\r\n          </CardActions>\r\n          <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n            <CardContent>\r\n              <div className={classes.forecastContainer}>\r\n                {forecastWeather.list.map((weather) => {\r\n                  return (\r\n                    <div className={classes.container} key={weather.dt}>\r\n                      <CardMedia\r\n                        component=\"img\"\r\n                        alt=\"Contemplative Reptile\"\r\n                        height=\"140\"\r\n                        title=\"Contemplative Reptile\"\r\n                        image={`http://openweathermap.org/img/wn/${`${icon(weather)}`}@2x.png`}\r\n                        className={classes.image}\r\n                      />\r\n                      <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          {weather.dt_txt}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                          {`Температура: ${temp(weather.main.temp)}, ${\r\n                            weather.weather[0].description\r\n                          }`}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                          {`Влажность: ${weather.main.humidity}`}\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                          {`Атмосферное давление: ${weather.main.pressure}`}\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </CardContent>\r\n          </Collapse>\r\n        </>\r\n      ) : null}\r\n    </Card>\r\n  );\r\n};\r\n\r\nWeatherCard.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles({\r\n  overlay: {\r\n    position: 'fixed',\r\n    left: '0',\r\n    top: '0',\r\n    right: '0',\r\n    bottom: '0',\r\n    backgroundColor: 'rgba(0, 0, 0, .7)',\r\n    zIndex: '10',\r\n  },\r\n});\r\n\r\nconst Overlay = ({ onClick }) => {\r\n  const classes = useStyles();\r\n\r\n  return <div className={classes.overlay} onClick={onClick} />;\r\n};\r\n\r\nOverlay.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Overlay;\r\n","import React, { useState } from 'react';\nimport { List, ListItem, Container, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport WeatherCard from './components/WeatherCard';\nimport Overlay from './components/Overlay';\n\nconst useStyles = makeStyles({\n  container: {\n    marginTop: '40px',\n  },\n});\n\nconst App = () => {\n  const [visible, setVisible] = useState(false);\n  const [cityWeather, setCityWeather] = useState('');\n\n  const cites = ['Москва', 'Санкт-Петербург', 'Казань'];\n  const classes = useStyles();\n\n  const visibleHandler = () => {\n    setVisible(false);\n  };\n\n  const openCard = (city) => {\n    setVisible(true);\n    setCityWeather(city);\n  };\n\n  return (\n    <Container maxWidth=\"sm\" className={classes.container}>\n      <List>\n        {cites.map((city) => {\n          return (\n            <ListItem key={city}>\n              <Button onClick={() => openCard(city)}>{city}</Button>\n            </ListItem>\n          );\n        })}\n      </List>\n      {visible === false ? null : (\n        <>\n          <Overlay onClick={visibleHandler} />\n          <WeatherCard city={cityWeather} />\n        </>\n      )}\n    </Container>\n  );\n};\n\nconst app = (\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport app from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}